version: "3.8"
services:
  # RabbitMQ service
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"

  redis:
    image: redis:7.4
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Postgres
  postgres:
    image: postgres:16
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: ticketsystem
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB for User Service
  user-db:
    image: mongo:8
    volumes:
      - user-db-data:/data/db
    ports:
      - "27017:27017"
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Auth Service
  user-service:
    build: ./services/user-service
    environment:
      DATABASE_URL: mongodb://order-db:27017/user-db
      RABBITMQ_URL: amqp://rabbitmq:5672
      LIGHTSTEP_ACCESS_TOKEN: sIazFmobGyk3mlSBQ7W7zB386SxNcnufrG1a-ECdU8Nr3NVM3TomMS8Na2PMR7f3eulxWnSmGpU2S3z3jygr61dLMYxWxUaAp8QpLMLF
    ports:
      - "3330:3330"
    depends_on:
      - rabbitmq
      - user-db

  # booking Service
  booking-service:
    build: ./services/booking-service
    environment:
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/ticketsystem
      RABBITMQ_URL: amqp://rabbitmq:5672
      REDIS_URL: redis://redis:6379
      LIGHTSTEP_ACCESS_TOKEN: fG8pet1gF-UCI3WESV6UUJOpyemGglCzEwzwK608WZX2n3iuD9Ye-DTi2dM4ZS3LeSUNen5z_FOQNM2PIdwTXhjllkZig6ggYV9Pflxr
    ports:
      - "3331:3331"
    depends_on:
      - rabbitmq
      - postgres

  # Notification Service
  notification-service:
    build: ./services/notification-service
    environment:
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/ticketsystem
      RABBITMQ_URL: amqp://rabbitmq:5672
      REDIS_URL: redis://redis:6379
      MAILJET_API_KEY: 3b642204f85fa944501880c36229742c
      MAILJET_API_SECRET: d52a1d26434321a8228dcd63f1d2dba9
    ports:
      - "3332:3332"
    depends_on:
      - rabbitmq
      - postgres

  # Train Service
  train-service:
    build: ./services/train-service
    environment:
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/ticketsystem
      RABBITMQ_URL: amqp://rabbitmq:5672
      REDIS_URL: redis://redis:6379
      LIGHTSTEP_ACCESS_TOKEN: B_b36hN46McP_DecjYyTlqdAs66a3xfvsEnNJ6QIAxyf0cos_bsVW1hRma_1KZirWQnln-mc5OJFan-0K4PXOEK1xv39Qtpy_Mp1LAF1
    ports:
      - "3333:3333"
    depends_on:
      - rabbitmq
      - postgres

  Payment Service (Spring Boot + Kotlin)
  payment-service:
    build: ./services/payment-service
    environment:
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/ticketsystem
      RABBITMQ_URL: amqp://rabbitmq:5672
      REDIS_URL: redis://redis:6379
      LIGHTSTEP_ACCESS_TOKEN: fG8pet1gF-UCI3WESV6UUJOpyemGglCzEwzwK608WZX2n3iuD9Ye-DTi2dM4ZS3LeSUNen5z_FOQNM2PIdwTXhjllkZig6ggYV9Pflxr
      BOOKING_SERVICE_URL: http://booking-service:3331
    ports:
      - "8080:8080"
    depends_on:
      - rabbitmq

  Customer Frontend
  frontend:
    build: ./frontend
    ports:
      - "8081:80"
    depends_on:
      - user-service
      - booking-service
      - train-service
      # - payment-service
      - notification-service
  # ELK Stack
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.3
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - esdata:/usr/share/elasticsearch/data

  logstash:
    image: docker.elastic.co/logstash/logstash:8.15.3
    ports:
      - "5044:5044"
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline
    depends_on:
      - elasticsearch

  # kibana:
  #   image: docker.elastic.co/kibana/kibana:8.15.3
  #   volumes:
  #     - ./kibana.yml:/usr/share/kibana/config/kibana.yml # Bind mount the kibana.yml file
  #     - ./logs:/usr/share/kibana/logs
  #   ports:
  #     - "5601:5601" # Expose Kibana on port 5601
  #   depends_on:
  #     - elasticsearch
  kibana:
    image: docker.elastic.co/kibana/kibana:8.15.3
    restart: always
    environment:
      - ELASTICSEARCH_HOSTS=["http://elasticsearch:9200"]
    ports:
      - 5601:5601
    volumes:
      - ./kibana.yml/:/usr/share/kibana/config/kibana.yml:ro
    depends_on:
      - elasticsearch
  nginx:
    build: ./gateway
    ports:
      - "9000:80"
    depends_on:
      - user-service
      - booking-service
      - notification-service
      - train-service
      - payment-service

  filebeat:
    image: docker.elastic.co/beats/filebeat:8.15.3
    volumes:
      - ./filebeat.yml:/usr/share/filebeat/filebeat.yml
      - ./services/user-service/logs:/app/services/user-service/logs
    depends_on:
      - logstash

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus

volumes:
  postgres-data:
  user-db-data:
  redis-data:
  esdata:
    driver: local
  grafana-data:
